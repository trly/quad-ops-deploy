services:
  reverse-proxy:
    image: ghcr.io/trly/caddy:main
    restart: always
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro,z
      - caddy-data:/data
      - caddy-config:/config
    ports:
      - '80:80'
      - '443:443'
    x-podman-env-secrets:
      porkbun-api-key: PORKBUN_API_KEY
      porkbun-api-secret-key: PORKBUN_API_SECRET_KEY
      acme-email: ACME_EMAIL
    networks:
      - default
      - proxy

  unifi-network-application:
    image: lscr.io/linuxserver/unifi-network-application:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - MONGO_USER=unifi
      - MONGO_HOST=infrastructure-unifi-db
      - MONGO_PORT=27017
      - MONGO_DBNAME=unifi
      - MONGO_AUTHSOURCE=admin
      - MEM_LIMIT=1024 #optional
      - MEM_STARTUP=1024 #optional
      - MONGO_TLS= #optional
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 1900:1900/udp #optional
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    x-podman-env-secrets:
      unifi-mongo-password: MONGO_PASS
    depends_on:
      - unifi-db
    networks:
      - proxy
      - unifi
    volumes:
      - unifi-config:/config
    restart: unless-stopped

  unifi-db:
    image: docker.io/library/mongo:8
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_USER=unifi
      - MONGO_DBNAME=unifi
      - MONGO_AUTHSOURCE=admin
    x-podman-env-secrets:
      unifi-mongo-root-password: MONGO_INITDB_ROOT_PASSWORD
      unifi-mongo-password: MONGO_PASS
    networks:
      - unifi
    volumes:
      - unifi-db-data:/data/db
      - ./unifi-init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro,z
    restart: unless-stopped

  authentik-db:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - authentik-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: authentik
      POSTGRES_DB: authentik
    x-podman-env-secrets:
      authentik-postgres-password: POSTGRES_PASSWORD

  authentik-redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - authentik-redis-data:/data

  authentik-server:
    image: ghcr.io/goauthentik/server:2025.6.3
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: infrastructure-authentik-db
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
    x-podman-env-secrets:
      authentik-postgres-password: AUTHENTIK_POSTGRESQL__PASSWORD
      authentik-secret-key: AUTHENTIK_SECRET_KEY
    volumes:
      - authentik-media:/media
      - authentik-certs:/certs

  authentik-worker:
    image: ghcr.io/goauthentik/server:2025.6.3
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: infrastructure-authentik-db
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
    x-podman-env-secrets:
      authentik-postgres-password: AUTHENTIK_POSTGRESQL__PASSWORD
      authentik-secret-key: AUTHENTIK_SECRET_KEY
    user: root
    volumes:
      - authentik-media:/media
      - authentik-certs:/certs
      - authentik-templates:/templates

volumes:
  caddy-data:
  caddy-config:
  unifi-db-data:
  unifi-config:
  authentik-db-data:
  authentik-redis-data:
  authentik-media:
  authentik-certs:
  authentik-templates:

secrets:
  porkbun-api-key:
    external: true
  porkbun-api-secret-key:
    external: true
  acme-email:
    external: true
  unifi-mongo-password:
    external: true
  unifi-mongo-root-password:
    external: true
  authentik-secret-key:
    external: true
  authentik-postgres-password:
    external: true

networks:
  default:
  proxy:
  unifi:
